name: Terraform new-apply

on: [workflow_dispatch]

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
#      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve
    
    - name: Call terraform output
      id: terraform-output
      run: |
        echo "ofer2"
        output=${terraform output admin_pswd}
        echo ::set-env name=admin_pass::${terraform output admin_pswd}
        echo $output
        echo $admin_pass
        admin_use=${terraform output admin_username}
        echo ::set-env name=admin_user::${terraform output admin_username}
        echo $admin_user
        echo $admin_use
        vm_pub_ip_address=${terraform output vm_public_ip_address}
        echo ::set-env name=ip_address::${terraform output vm_public_ip_address}
        echo $vm_pub_ip_address
        echo $ip_address        
        
        
        
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      with:
        host: ${terraform output vm_public_ip_address}
        username: ${terraform output admin_username}
        password: ${terraform output admin_pswd}
        port: 22
        script: whoami
